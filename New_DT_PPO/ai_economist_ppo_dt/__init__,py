"""
AI-Economist PPO and DT
===

This is the main file for the AI-Economist project. It contains the main
"""
__all__ = ["random", "Actor", "Critic", "env_config_wrapper", "PPO", "create_environment", "get_basic_logger"]

import random

from .models import Actor, Critic
from .config import env_config_wrapper
from .algorithm import PPO
from .utils import get_basic_logger, create_environment

SEED = 0

if SEED == 0:
    random = random.SystemRandom()
else:
    random.seed(SEED)
### DOCSTRING EXAMPLE
"""
NumPy
=====

Provides
  1. An array object of arbitrary homogeneous items
  2. Fast mathematical operations over arrays
  3. Linear Algebra, Fourier Transforms, Random Number Generation

How to use the documentation
----------------------------
Documentation is available in two forms: docstrings provided
with the code, and a loose standing reference guide, available from
`the NumPy homepage <https://www.scipy.org>`_.

We recommend exploring the docstrings using
`IPython <https://ipython.org>`_, an advanced Python shell with
TAB-completion and introspection capabilities.  See below for further
instructions.

The docstring examples assume that `numpy` has been imported as `np`::

  >>> import numpy as np

Code snippets are indicated by three greater-than signs::

  >>> x = 42
  >>> x = x + 1

Use the built-in ``help`` function to view a function's docstring::

  >>> help(np.sort)
  ... # doctest: +SKIP

For some objects, ``np.info(obj)`` may provide additional help.  This is
particularly true if you see the line "Help on ufunc object:" at the top
of the help() page.  Ufuncs are implemented in C, not Python, for speed.
The native Python help() does not know how to view their help, but our
np.info() function does.

To search for documents containing a keyword, do::

  >>> np.lookfor('keyword')
  ... # doctest: +SKIP

General-purpose documents like a glossary and help on the basic concepts
of numpy are available under the ``doc`` sub-module::

  >>> from numpy import doc
  >>> help(doc)
  ... # doctest: +SKIP

Available subpackages
---------------------
doc
    Topical documentation on broadcasting, indexing, etc.
lib
    Basic functions used by several sub-packages.
random
    Core Random Tools
linalg
    Core Linear Algebra Tools
fft
    Core FFT routines
polynomial
    Polynomial tools
testing
    NumPy testing tools
f2py
    Fortran to Python Interface Generator.
distutils
    Enhancements to distutils with support for
    Fortran compilers support and more.

Utilities
---------
test
    Run numpy unittests
show_config
    Show numpy build configuration
dual
    Overwrite certain functions with high-performance SciPy tools.
    Note: `numpy.dual` is deprecated.  Use the functions from NumPy or Scipy
    directly instead of importing them from `numpy.dual`.
matlib
    Make everything matrices.
__version__
    NumPy version string

Viewing documentation using IPython
-----------------------------------
Start IPython with the NumPy profile (``ipython -p numpy``), which will
import `numpy` under the alias `np`.  Then, use the ``cpaste`` command to
paste examples into the shell.  To see which functions are available in
`numpy`, type ``np.<TAB>`` (where ``<TAB>`` refers to the TAB key), or use
``np.*cos*?<ENTER>`` (where ``<ENTER>`` refers to the ENTER key) to narrow
down the list.  To view the docstring for a function, use
``np.cos?<ENTER>`` (to view the docstring) and ``np.cos??<ENTER>`` (to view
the source code).

Copies vs. in-place operation
-----------------------------
Most of the functions in `numpy` return a copy of the array argument
(e.g., `np.sort`).  In-place versions of these functions are often
available as array methods, i.e. ``x = np.array([1,2,3]); x.sort()``.
Exceptions to this rule are documented.

"""

### END DOCSTRING EXAMPLE
### DOCSTRING EXAMPLE FOR FUNCTIONS
"""
        Build an actor (policy) network that maps states (for now only world_map and flat) -> actions

        Parameters
        ----------
        action_space : int
            Dimension of the action space.
        conv_filters : tuple
            Number of filters for each convolutional layer.
        filter_size : int
            Size of the convolutional filters.
        
        Returns
        -------
        model : Model
            The actor model.
        
        Raises -> TEST
        ------
        ValueError
            If the action space is not a multiple of 2.

        Usage 
        -----
        >>> actor = Actor()
        >>> def loss(y_true, y_pred):
        >>>     return actor.actor_ppo_loss(y_true, y_pred)

        References to class
        -----
        `tf.keras.optimizers.schedules.LearningRateSchedule`
        """
### END DOCSTRING EXAMPLE FOR FUNCTIONS