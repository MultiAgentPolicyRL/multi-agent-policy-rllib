Allocate Nodes = <hpc-c11-node07 hpc-c10-node01 hpc-c07-node12 hpc-c05-node03>
set up ray cluster...


Working with node hpc-c11-node07
first allocate node - use as headnode ...
2022-10-04 18:18:52,935	INFO scripts.py:357 -- Using IP address 192.168.115.43 for this node.
2022-10-04 18:18:52,939	INFO resource_spec.py:212 -- Starting Ray with 309.08 GiB memory available for workers and up to 136.48 GiB for objects. You can adjust these settings with ray.init(memory=<bytes>, object_store_memory=<bytes>).
2022-10-04 18:18:55,687	INFO services.py:1170 -- View the Ray dashboard at [1m[32mlocalhost:8265[39m[22m
2022-10-04 18:18:55,724	INFO scripts.py:387 -- 
Started Ray on this node. You can add additional nodes to the cluster by calling

    ray start --address='192.168.115.43:6379' --redis-password='9c991032-b8f2-40c1-98d3-64b25df66db9'

from the node you wish to add. You can connect a driver to the cluster from Python by running

    import ray
    ray.init(address='auto', redis_password='9c991032-b8f2-40c1-98d3-64b25df66db9')

If you have trouble connecting from a different machine, check that your firewall is configured properly. If you wish to terminate the processes that have been started, run

    ray stop

Working with node hpc-c10-node01
then allocate other nodes:  1
node NAME: hpc-c10-node01.unitn.it
node IP: 192.168.115.134
dest IP: 192.168.115.43:6379
2022-10-04 18:19:07,858	INFO scripts.py:429 -- Using IP address 192.168.115.134 for this node.
2022-10-04 18:19:07,864	INFO resource_spec.py:212 -- Starting Ray with 299.12 GiB memory available for workers and up to 128.21 GiB for objects. You can adjust these settings with ray.init(memory=<bytes>, object_store_memory=<bytes>).
2022-10-04 18:19:07,903	INFO scripts.py:438 -- 
Started Ray on this node. If you wish to terminate the processes that have been started, run

    ray stop

Working with node hpc-c07-node12
then allocate other nodes:  2
exiting hpc-c10-node01.unitn.it
node NAME: hpc-c07-node12.unitn.it
node IP: 192.168.115.53
dest IP: 192.168.115.43:6379

Working with node hpc-c05-node03
then allocate other nodes:  3
node NAME: hpc-c05-node03.unitn.it
node IP: 192.168.115.60
dest IP: 192.168.115.43:6379
2022-10-04 18:19:27,308	INFO scripts.py:429 -- Using IP address 192.168.115.53 for this node.
2022-10-04 18:19:27,311	INFO resource_spec.py:212 -- Starting Ray with 142.77 GiB memory available for workers and up to 61.21 GiB for objects. You can adjust these settings with ray.init(memory=<bytes>, object_store_memory=<bytes>).
2022-10-04 18:19:27,407	INFO scripts.py:438 -- 
Started Ray on this node. If you wish to terminate the processes that have been started, run

    ray stop
2022-10-04 18:19:29,395	INFO scripts.py:429 -- Using IP address 192.168.115.60 for this node.
2022-10-04 18:19:29,398	INFO resource_spec.py:212 -- Starting Ray with 557.67 GiB memory available for workers and up to 186.26 GiB for objects. You can adjust these settings with ray.init(memory=<bytes>, object_store_memory=<bytes>).
2022-10-04 18:19:29,454	INFO scripts.py:438 -- 
Started Ray on this node. If you wish to terminate the processes that have been started, run

    ray stop
exiting hpc-c07-node12.unitn.it
exiting hpc-c05-node03.unitn.it

done, now launching python program
Inside covid19_components.py: 0 GPUs are available.
No GPUs found! Running the simulation on a CPU.
Inside covid19_env.py: 0 GPUs are available.
No GPUs found! Running the simulation on a CPU.
2022-10-04 18:23:25,556	WARNING worker.py:809 -- When connecting to an existing cluster, _internal_config must match the cluster's _internal_config.
2022-10-04 18:23:25,584 seed (final): 24061000
2022-10-04 18:23:25,652	INFO trainer.py:421 -- Tip: set 'eager': true or the --eager flag to enable TensorFlow eager execution
2022-10-04 18:23:26,077	INFO trainer.py:580 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.
2022-10-04 18:23:47,764	INFO trainable.py:180 -- _setup took 21.689 seconds. If your trainable is slow to initialize, consider setting reuse_actors=True to reduce actor creation overheads.
2022-10-04 18:23:47,765	INFO trainable.py:217 -- Getting current IP.
2022-10-04 18:24:01,543	INFO trainable.py:180 -- _setup took 13.645 seconds. If your trainable is slow to initialize, consider setting reuse_actors=True to reduce actor creation overheads.
2022-10-04 18:24:01,543	INFO trainable.py:217 -- Getting current IP.
2022-10-04 18:24:01,571 Not restoring trainer...
2022-10-04 18:24:01,572 Starting with fresh agent TF weights.
2022-10-04 18:24:01,572 Starting with fresh planner TF weights.
Training
-- PPO Agents -- Steps done: 0
2022-10-04 18:28:41,763 Iter 1: steps this-iter 4000 total 4000 -> 4/5000 episodes done
2022-10-04 18:28:41,768 custom_metrics: {}
date: 2022-10-04_18-28-41
done: false
episode_len_mean: 1000.0
episode_reward_max: 17.03694678723815
episode_reward_mean: 8.24608734451642
episode_reward_min: -0.967004813021944
episodes_this_iter: 4
episodes_total: 4
experiment_id: ced1badd9692407780bd4865a82347a5
hostname: hpc-c11-node07.unitn.it
info:
  grad_time_ms: 150214.371
  learner:
    agent_policy:
      cur_kl_coeff: 0.0
      cur_lr: 0.0003000000142492354
      entropy: 1.6385877132415771
      entropy_coeff: 0.02500000037252903
      kl: 0.0862639844417572
      model: {}
      policy_loss: -0.09514675289392471
      total_loss: -0.13431446254253387
      vf_explained_var: 0.8217906951904297
      vf_loss: 0.03593933582305908
  load_time_ms: 1417.511
  num_steps_sampled: 4000
  num_steps_trained: 16000
  sample_time_ms: 120975.181
  update_time_ms: 6408.934
iterations_since_restore: 1
node_ip: 192.168.115.43
num_healthy_workers: 2
off_policy_estimator: {}
optimizer_steps_this_iter: 1
perf:
  cpu_util_percent: 70.22473958333333
  ram_util_percent: 10.914843749999998
pid: 13755
policy_reward_max:
  agent_policy: 4.912167255218108
  planner_policy: 3.0787288245018107
policy_reward_mean:
  agent_policy: 1.6925935148683475
  planner_policy: 1.4757132850428758
policy_reward_min:
  agent_policy: -0.24398055776724803
  planner_policy: 0.0
sampler_perf:
  mean_env_wait_ms: 2.0746218449231804
  mean_inference_ms: 2.8989163712821324
  mean_processing_ms: 0.6177050658668773
time_since_restore: 279.35874366760254
time_this_iter_s: 279.35874366760254
time_total_s: 279.35874366760254
timestamp: 1664900921
timesteps_since_restore: 4000
timesteps_this_iter: 4000
timesteps_total: 4000
training_iteration: 1

2022-10-04 18:28:41,923 >> Wrote dense logs to: /home/ettore.saggiorato/ai-economist-ppo-decision-tree/ai-economist/tutorials/rllib/experiments/check/phase1_gpu/dense_logs/logs_0000000000004000
-- PPO Agents -- Steps done: 4
=>> PBS: job killed: walltime 689 exceeded limit 600
*** Aborted at 1664901018 (unix time) try "date -d @1664901018" if you are using GNU date ***
PC: @                0x0 (unknown)
2022-10-04 18:30:18,111	ERROR import_thread.py:93 -- ImportThread: Connection closed by server.
2022-10-04 18:30:18,112	ERROR worker.py:1092 -- listen_error_messages_raylet: Connection closed by server.
*** SIGTERM (@0xdf6) received by PID 13755 (TID 0x2aee8d6b13c0) from PID 3574; stack trace: ***
    @     0x2aee8d8af630 (unknown)
    @     0x2aee8e2bdd19 syscall
    @     0x2aeee0d08479 nsync::nsync_mu_semaphore_p_with_deadline()
    @     0x2aeee0d07ab9 nsync::nsync_sem_wait_with_cancel_()
    @     0x2aeee0d050e3 nsync::nsync_cv_wait_with_deadline_generic()
    @     0x2aeee0d055e3 nsync::nsync_cv_wait_with_deadline()
    @     0x2aeedfd7f40b tensorflow::DirectSession::RunInternal()
    @     0x2aeedfd80829 tensorflow::DirectSession::Run()
    @     0x2aeedfd69134 tensorflow::DirectSession::Run()
    @     0x2aeed00848c2 tensorflow::SessionRef::Run()
    @     0x2aeed04dff5e TF_Run_Helper()
    @     0x2aeed04e0c28 TF_SessionRun
    @     0x2aeed007e01f tensorflow::TF_SessionRun_wrapper_helper()
    @     0x2aeed007e0c2 tensorflow::TF_SessionRun_wrapper()
    @     0x2aef03961274 _ZZN8pybind1112cpp_function10initializeIZL32pybind11_init__pywrap_tf_sessionRNS_7module_EEUlP10TF_SessionP9TF_BufferRKNS_6handleERKSt6vectorI9TF_OutputSaISC_EERKSB_IP12TF_OperationSaISI_EES7_E15_NS_6objectEJS5_S7_SA_SG_SM_S7_EJNS_4nameENS_5scopeENS_7siblingEEEEvOT_PFT0_DpT1_EDpRKT2_ENUlRNS_6detail13function_callEE1_4_FUNES15_
    @     0x2aef0394ac98 pybind11::cpp_function::dispatcher()
    @           0x46299c _PyCFunction_FastCallKeywords
    @           0x4fc23a _PyEval_EvalFrameDefault
    @           0x46217a function_code_fastcall
    @           0x4f79ff _PyEval_EvalFrameDefault
    @           0x501a88 _PyEval_EvalCodeWithName
    @           0x468f5f PyObject_Call
    @           0x4f91a4 _PyEval_EvalFrameDefault
    @           0x501a88 _PyEval_EvalCodeWithName
    @           0x4625aa _PyFunction_FastCallKeywords
    @           0x4f79ff _PyEval_EvalFrameDefault
    @           0x501ed8 _PyEval_EvalCodeWithName
    @           0x4625aa _PyFunction_FastCallKeywords
    @           0x4f79ff _PyEval_EvalFrameDefault
    @           0x46217a function_code_fastcall
    @           0x4f79ff _PyEval_EvalFrameDefault
    @           0x501a88 _PyEval_EvalCodeWithName
